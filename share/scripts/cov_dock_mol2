#!/usr/bin/env python
import sys,os
import argparse

obabelbin = 'obabel'
chimerabin = 'chimera'
cd_base = os.environ["CONDA_PREFIX"]+"/share/covdock"

# parse input 
parser = argparse.ArgumentParser()
parser.add_argument("-i",type = str, help = "Input mol2", required = True)
parser.add_argument("-r",type = str, help = "Receptor file", required = True)
parser.add_argument("-s",type = str, help = "Receptor CYS specifer", required = True)
parser.add_argument("-l",type = str, help = "Flex residues list file" ,required = True)
parser.add_argument("-w",type = str, help = "Working dir", default = "default_covdock_results" )
args = parser.parse_args()
infile = args.i
receptor = args.r
flexlist = args.l
specifer = args.s
wd = args.w

assert infile[-5:] == ".mol2"
name = os.path.basename(infile)[:-5]

# cp files
os.system(f"mkdir {wd}")
os.system(f"cp {receptor}.pdb {wd}")
os.system(f"cp {flexlist} {wd}")
os.system(f"cp {infile}   {wd}")
os.chdir(f"{wd}")

if True:
    # make mol2
    for line in open( infile ):
        if "HS" in line:
            h_index = int( line.split()[0] ) 
        if "SH" in line:
            s_index = int( line.split()[0] ) 

    # make sh
    with open("run.sh","w") as ofp:
        ofp.write("source ~/.bashrc\n")
        ofp.write("conda activate covdock\n")
        ofp.write(f"export RECEPTOR='{receptor}'\n")
        ofp.write(f"export CYSSPECIFER='{specifer}'\n")
        ofp.write("export FLEXINDEXFILE='flex.list'\n")
        ofp.write(f"export LIGAND='{name}'\n")
        ofp.write(f"export LIGANDINDICES='{h_index},{s_index}'\n")
        ofp.write(f"bash {cd_base}/share/scripts/run_covalent_dock.sh \n")
        ofp.write("\n")

    # submit 
    os.system("bash run.sh")

    # grep log
    os.system('grep -E  "Run =|Estimated Free Energy of Binding" my_docking.pdbqt > score.log')

    # clean
    if "DEBUG" not in os.environ:
        os.system("rm *.map")
        os.system(f"rm chimera.com empty {name}.mol2 {receptor}_flex.pdbqt {receptor}.glg {receptor}.gpf {receptor}.pdbqt {receptor}_rigid.maps.fld {receptor}_rigid.maps.xyz {receptor}_rigid.pdbqt flex.fp ligcovalent_{receptor}.dlg ligcovalent_{receptor}.dpf ligcovalent_flex.pdbqt ligcovalent.pdbqt ligcovalent_rigid.pdbqt ligcovalent_single.pdb tmp.mol2")
        os.system("rm residues.log ")


    print("Done")

os.chdir(f"..")

